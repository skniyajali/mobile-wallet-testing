name: 'KMP Build Android App'
description: 'Build the Android application using Gradle'
author: 'Mifos Initiative'
branding:
  icon: 'play'
  color: 'orange'

inputs:
  android_package_name:
    description: 'Name of the Android project module'
    required: true
  build_type:
    description: 'Type of build to perform'
    required: true
    default: 'Debug'
  key_store:
    description: 'Base64 encoded keystore file'
    required: false
  google_services:
    description: 'Base64 encoded google-services.json file'
    required: false
  key_store_password:
    description: 'Password for the keystore file'
    required: false
  key_store_alias:
    description: 'Alias for the keystore file'
    required: false
  key_store_alias_password:
    description: 'Password for the keystore alias'
    required: false


outputs:
  demo_apk:
    description: 'Path to Demo APK'
    value: ${{ steps.collect-apks.outputs.demo_apk }}
  prod_apk:
    description: 'Path to Prod APK'
    value: ${{ steps.collect-apks.outputs.prod_apk }}
  artifact-name:
    description: 'Name of the artifact'
    value: ${{ steps.collect-apks.outputs.artifact-name }}

runs:
  using: composite
  steps:
    - name: Set up Java development environment
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'  # Use Zulu distribution of OpenJDK
        java-version: '17'     # Use Java 17 version

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    # Cache Gradle dependencies and build outputs to speed up future builds
    - name: Cache Gradle and build outputs
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          build
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    # Generate version number
    - name: Generate Release Number
      id: rel_number
      shell: bash
      run: |
        ./gradlew versionFile
        COMMITS=`git rev-list --count HEAD`
        TAGS=`git tag | grep -v beta | wc -l`
        VC=$(((COMMITS+TAGS) << 1))
        echo "version-code=$VC" >> $GITHUB_OUTPUT
        VERSION=`cat version.txt`
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Inflate Secrets
      if: ${{ inputs.build_type == 'Release' }}
      shell: bash
      env:
        KEYSTORE: ${{ inputs.key_store }}
        GOOGLE_SERVICES: ${{ inputs.google_services }}
      run: |
        # Mock debug google-services.json
        cp .github/mock-google-services.json ${{ inputs.android_package_name }}/google-services.json

        # Inflate keystore
        echo $KEYSTORE | base64 --decode > ${{ inputs.android_package_name }}/release_keystore.keystore

        # Inflate google-services.json
        echo $GOOGLE_SERVICES  | base64 --decode > ${{ inputs.android_package_name }}/google-services.json


    - name: Build Debug Android App
      if: ${{ inputs.build_type == 'Debug' }}
      shell: bash
      env:
        VERSION_CODE: ${{ steps.rel_number.outputs.version-code }}
        VERSION: ${{ steps.rel_number.outputs.version }}
      run: ./gradlew :${{ inputs.android_package_name }}:assembleDebug

    - name: Build Release Android App
      if: ${{ inputs.build_type == 'Release' }}
      shell: bash
      env:
        KEYSTORE_PASSWORD: ${{ inputs.key_store_password }}
        KEYSTORE_ALIAS: ${{ inputs.key_store_alias }}
        KEYSTORE_ALIAS_PASSWORD: ${{ inputs.key_store_alias_password }}
        VERSION_CODE: ${{ steps.rel_number.outputs.version-code }}
        VERSION: ${{ steps.rel_number.outputs.version }}
      run: ./gradlew :${{ inputs.android_package_name }}:assembleRelease

    - name: Collect APK Paths
      id: collect-apks
      shell: bash
      run: |
        # Find Demo APK
        demo_apk=$(find . -path "**/build/outputs/apk/demo/debug/*.apk" -print -quit)

        # Find Prod APK
        prod_apk=$(find . -path "**/build/outputs/apk/prod/release/*.apk" -print -quit)

        # Output APK paths
        echo "demo_apk=${demo_apk}" >> $GITHUB_OUTPUT
        echo "prod_apk=${prod_apk}" >> $GITHUB_OUTPUT
        echo "artifact-name=android-app" >> $GITHUB_OUTPUT

        # Print for logging
        echo "Demo APK: ${demo_apk}"
        echo "Prod APK: ${prod_apk}"

    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.collect-apks.outputs.artifact-name }}
        path: |
          ${{ steps.collect-apks.outputs.demo_apk }}
          ${{ steps.collect-apks.outputs.prod_apk }}
